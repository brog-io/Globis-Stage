name: "PR Review and Notification System"
on: 
  pull_request:
    types: [opened, synchronize, labeled, unlabeled]
  check_suite:
    types: [completed]

jobs:
  add-label:
    runs-on: ubuntu-latest
    steps:
      - name: labeler
        uses: actions/labeler@v4
        with:
          repo-token: "${{ secrets.GITHUB_TOKEN }}"
          configuration-path: .github/filters.yml

  process-pr:
    needs: [add-label]
    runs-on: ubuntu-latest
    outputs:
      tests-completed: ${{ steps.check-tests.outputs.completed }}
    steps:
      - uses: actions/checkout@v3
      
      # Check if all tests have completed
      - name: Check test status
        id: check-tests
        uses: actions/github-script@v6
        with:
          script: |
            const { data: checks } = await github.rest.checks.listForRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: context.payload.pull_request.head.sha
            });
            
            const allCompleted = checks.check_runs.every(check => 
              check.status === 'completed'
            );
            
            core.setOutput('completed', allCompleted);

  notify-reviewers:
    needs: process-pr
    runs-on: ubuntu-latest
    if: needs.process-pr.outputs.tests-completed == 'true'
    steps:
      - uses: actions/checkout@v3
      
      - uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: .github/filters.yml
      
      # Get CODEOWNERS-based reviewers with improved parsing
      - name: Parse CODEOWNERS
        id: codeowners
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const path = require('path');

            const codeowners = fs.readFileSync('CODEOWNERS', 'utf8').split('\n');
            const changedFiles = await github.rest.pulls.listFiles({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.payload.pull_request.number
            });

            function matchOwners(filePath) {
              let matchedOwners = new Set();
              codeowners.forEach(line => {
                if (line.trim().startsWith("#") || line.trim() === "") return; // Ignore comments and empty lines
                
                const [pattern, ...owners] = line.split(/\s+/);
                if (!owners.length) return; // Ignore lines without owners
                
                const regexPattern = pattern
                  .replace(/\*/g, ".*")
                  .replace(/\//g, "\\/")
                  .replace(/\./g, "\\.");
                if (new RegExp(`^${regexPattern}`).test(filePath)) {
                  owners.forEach(owner => matchedOwners.add(owner.replace('@', '')));
                }
              });
              return matchedOwners;
            }

            let reviewers = new Set();
            changedFiles.data.forEach(file => {
              matchOwners(file.filename).forEach(owner => reviewers.add(owner));
            });

            // Ensure we have at least one reviewer
            if (reviewers.size === 0) {
              core.warning('No reviewers found in CODEOWNERS for changed files');
            }

            core.setOutput('reviewers', Array.from(reviewers).join(','));

      # Send bundled Slack notification with label context
      - name: Notify reviewers
        uses: Ilshidur/action-slack@2.0.2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_CHANNEL: pull_request
        with:
          args: |
            {
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*New PR Ready for Review*\n<${{ github.event.pull_request.html_url }}|${{ github.event.pull_request.title }}>"
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "‚úÖ All tests have passed\nüë• Reviewers: ${{ steps.codeowners.outputs.reviewers }}\nüè∑Ô∏è Areas: ${{ join(github.event.pull_request.labels.*.name, ', ') }}"
                  }
                }
              ]
            }

  update-pr-status:
    needs: [process-pr, notify-reviewers]
    runs-on: ubuntu-latest
    steps:
      - name: Update PR status
        uses: actions/github-script@v6
        with:
          script: |
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: '‚úÖ All tests have completed and reviewers have been notified.\nLabels: ${{ join(github.event.pull_request.labels.*.name, ', ') }}'
            });