name: "PR Review and Notification System"

on: 
  pull_request:
    types: [opened, synchronize, labeled, unlabeled]
  check_suite:
    types: [completed]

jobs:
  add-label:
    runs-on: ubuntu-latest
    steps:
      - name: Apply Labels Based on Changes
        uses: actions/labeler@v4
        with:
          repo-token: "${{ secrets.GITHUB_TOKEN }}"
          configuration-path: .github/filters.yml

  process-pr:
    needs: [add-label]
    runs-on: ubuntu-latest
    outputs:
      tests-completed: ${{ steps.check-tests.outputs.completed }}
    steps:
      - uses: actions/checkout@v3
      
      - name: Check Test Status
        id: check-tests
        uses: actions/github-script@v6
        with:
          script: |
            const { data: checks } = await github.rest.checks.listForRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: context.payload.pull_request.head.sha
            });

            const allCompleted = checks.check_runs.every(check => check.status === 'completed');

            core.setOutput('completed', allCompleted.toString());

  notify-reviewers:
    needs: process-pr
    runs-on: ubuntu-latest
    if: needs.process-pr.outputs.tests-completed == 'true'
    steps:
      - uses: actions/checkout@v3

      - uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: .github/filters.yml

      - name: Parse CODEOWNERS and Find Reviewers
        id: codeowners
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const path = require('path');

            const codeownersPath = '.github/CODEOWNERS';
            if (!fs.existsSync(codeownersPath)) {
              core.setOutput('reviewers', '');
              core.warning('CODEOWNERS file not found.');
              return;
            }

            const codeowners = fs.readFileSync(codeownersPath, 'utf8').split('\n');
            const changedFiles = await github.rest.pulls.listFiles({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.payload.pull_request.number
            });

            function matchOwners(filePath) {
              let matchedOwners = new Set();
              codeowners.forEach(line => {
                if (line.trim().startsWith("#") || line.trim() === "") return;
                
                const [pattern, ...owners] = line.split(/\s+/);
                if (!owners.length) return;

                const regexPattern = pattern.replace(/\*/g, ".*").replace(/\//g, "\\/");

                if (new RegExp(`^${regexPattern}`).test(filePath)) {
                  owners.forEach(owner => matchedOwners.add(owner.replace('@', '').trim()));
                }
              });
              return matchedOwners;
            }

            let reviewers = new Set();
            changedFiles.data.forEach(file => {
              matchOwners(file.filename).forEach(owner => reviewers.add(owner));
            });

            if (reviewers.size === 0) {
              core.warning('No reviewers found in CODEOWNERS for changed files.');
            }

            core.setOutput('reviewers', Array.from(reviewers).join(','));

      - name: Assign Reviewers to PR
        uses: actions/github-script@v6
        with:
          script: |
            const reviewers = "${{ steps.codeowners.outputs.reviewers }}".split(',').filter(r => r);
            if (reviewers.length > 0) {
              await github.rest.pulls.requestReviewers({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: context.payload.pull_request.number,
                reviewers: reviewers
              });
              console.log(`Assigned reviewers: ${reviewers.join(', ')}`);
            } else {
              core.warning("No reviewers found to assign.");
            }

      - name: Notify Reviewers on Discord
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK_URL }}
        run: |
          if [ -z "$DISCORD_WEBHOOK" ]; then
            echo "‚ùå DISCORD_WEBHOOK is not set."
            exit 1
          fi
          
          REVIEWERS="${{ steps.codeowners.outputs.reviewers }}"
          if [ -z "$REVIEWERS" ]; then
            echo "‚ö†Ô∏è No reviewers found, skipping Discord notification."
            exit 0
          fi

          curl -H "Content-Type: application/json" \
          -X POST \
          -d '{
            "username": "GitHub Actions",
            "avatar_url": "https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png",
            "embeds": [{
              "title": "New PR Ready for Review",
              "url": "${{ github.event.pull_request.html_url }}",
              "description": "**${{ github.event.pull_request.title }}**",
              "color": 5814783,
              "fields": [
                { "name": "‚úÖ Test Status", "value": "All tests have passed", "inline": true },
                { "name": "üë• Reviewers", "value": "'"$REVIEWERS"'", "inline": true },
                { "name": "üè∑Ô∏è Labels", "value": "${{ join(github.event.pull_request.labels.*.name, ', ') }}", "inline": false }
              ],
              "footer": {
                "text": "GitHub Actions | PR Review System",
                "icon_url": "https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png"
              }
            }]
          }' \
          $DISCORD_WEBHOOK

  update-pr-status:
    needs: [process-pr, notify-reviewers]
    runs-on: ubuntu-latest
    steps:
      - name: Comment on PR with Status Update
        uses: actions/github-script@v6
        with:
          script: |
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.pull_request.number,
              body: '‚úÖ All tests have completed and reviewers have been notified.\nLabels: ${{ join(github.event.pull_request.labels.*.name, ', ') }}'
            });
