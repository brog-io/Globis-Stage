name: Auto Merge
on:
  pull_request:
    types:
      - opened
      - synchronize
      - labeled
      - unlabeled
      - review_requested
      - review_request_removed

jobs:
  auto-merge:
    runs-on: ubuntu-latest
    # Prevent workflow from running on forks
    if: github.event.pull_request.head.repo.full_name == github.repository
    permissions:
      contents: write
      pull-requests: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Setup GitHub CLI
        run: |
          # GitHub CLI is pre-installed on Ubuntu runners
          gh auth login --with-token <<< "${{ secrets.GITHUB_TOKEN }}"
          
      - name: Get PR details
        id: pr_details
        run: |
          # Use jq for more reliable JSON parsing
          PR_DATA=$(gh pr view ${{ github.event.pull_request.number }} --json labels,reviews,statusCheckRollup,baseRefName)
          
          # Extract required information
          PR_LABELS=$(echo "$PR_DATA" | jq -r '.labels[].name')
          PR_APPROVALS=$(echo "$PR_DATA" | jq -r '.reviews[].state' | grep -c "APPROVED" || echo "0")
          PR_STATUS=$(echo "$PR_DATA" | jq -r '.statusCheckRollup[].conclusion')
          BASE_BRANCH=$(echo "$PR_DATA" | jq -r '.baseRefName')
          
          # Set outputs
          echo "labels<<EOF" >> $GITHUB_OUTPUT
          echo "$PR_LABELS" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          echo "approvals=$PR_APPROVALS" >> $GITHUB_OUTPUT
          echo "status<<EOF" >> $GITHUB_OUTPUT
          echo "$PR_STATUS" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          echo "base_branch=$BASE_BRANCH" >> $GITHUB_OUTPUT
          
          # Also set environment variables for conditions
          echo "PR_LABELS=$PR_LABELS" >> $GITHUB_ENV
          echo "PR_APPROVALS=$PR_APPROVALS" >> $GITHUB_ENV
          
      - name: Check merge conditions
        id: merge_check
        run: |
          # Check if all required conditions are met
          if [[ "${{ env.PR_APPROVALS }}" -gt 0 ]] && \
             [[ ! "${{ env.PR_LABELS }}" =~ "no-auto-merge" ]] && \
             [[ ! "${{ steps.pr_details.outputs.status }}" =~ "FAILURE" ]] && \
             [[ ! "${{ steps.pr_details.outputs.status }}" =~ "CANCELLED" ]]; then
            echo "can_merge=true" >> $GITHUB_OUTPUT
          else
            echo "can_merge=false" >> $GITHUB_OUTPUT
          fi
          
      - name: Auto-merge PR
        if: steps.merge_check.outputs.can_merge == 'true'
        run: |
          echo "Attempting to auto-merge PR #${{ github.event.pull_request.number }}"
          
          # Attempt to merge with retries
          for i in {1..3}; do
            if gh pr merge ${{ github.event.pull_request.number }} --auto --merge; then
              echo "Successfully initiated auto-merge"
              exit 0
            else
              echo "Merge attempt $i failed, retrying in 10 seconds..."
              sleep 10
            fi
          done
          
          echo "Failed to merge after 3 attempts"
          exit 1
          
      - name: Create comment if merge conditions not met
        if: steps.merge_check.outputs.can_merge == 'false'
        run: |
          COMMENT="⚠️ Auto-merge conditions not met. Required conditions:\n"
          COMMENT+="✓ At least one approval (current: ${{ env.PR_APPROVALS }})\n"
          COMMENT+="✓ No 'no-auto-merge' label\n"
          COMMENT+="✓ All status checks must pass\n\n"
          COMMENT+="Please address these requirements and try again."
          
          gh pr comment ${{ github.event.pull_request.number }} --body "$COMMENT"
